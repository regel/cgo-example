# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
before:
  hooks:
    - g++ -c -o example.o example.cpp
    - ar rcs example.a example.o 
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...
builds:
  - id: linux-amd64
    env:
      - CGO_ENABLED=1
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    goos:
      - linux
    goarch:
      - amd64
    ldflags:
      - s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      - -L example.a

  # see https://github.com/goreleaser/goreleaser-cross
  - id: darwin-amd64
    env:
      - CGO_ENABLED=1
      - CC=o64-clang
      - CXX=o64-clang++
    goos:
      - darwin
    goarch:
      - amd64
    ldflags:
      - s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      - -L example.a

  - id: darwin-arm64
    env:
      - CGO_ENABLED=1
      - CC=oa64-clang
      - CXX=oa64-clang++
    goos:
      - darwin
    goarch:
      - arm64
    ldflags:
      - s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      - -L example.a

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
    - goos: windows
      format: zip
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ incpatch .Version }}-next"
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'


gomod:
  # Proxy a module from proxy.golang.org, making the builds verifiable.
  # This will only be effective if running against a tag. Snapshots will ignore
  # this setting.
  # Notice: for this to work your `build.main` must be a package, not a `.go` file.
  proxy: true

  # If proxy is true, use these environment variables when running `go mod`
  # commands (namely, `go mod tidy`).
  #
  # Default: `os.Environ()` merged with what you set the root `env` section.
  env:
    - GOPROXY=https://proxy.golang.org,direct
    - GOSUMDB=sum.golang.org

# The lines beneath this are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj


# Check https://goreleaser.com/customization/homebrew/
brews:
  - homepage: 'https://github.com/regel/homebrew-cgo-example'
    description: 'Example binary distribution using homebrew.'
    folder: Formula
    tap:
      owner: regel
      name: homebrew-cgo-example
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"

